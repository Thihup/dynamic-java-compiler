<!--
  $Header$
-->
<!-- *** BUILD FILE HEADER ***

     This project file, along with these others, are all quite similar:
     drjava: docs/build.xml
     drjava: drjava/build.xml
     drjava: dynamicjava/build.xml
     drjava: eclipse/build.xml
     drjava: jedit/build.xml
     drjava: platforms/build.xml
     javalanglevels: javalanglevels/build.xml
     ricejst: ricejst/build.xml
     
     In order to avoid inconsistency, changes made to one should, in general, be reflected in each of the others.
     PLEASE DON'T FIX OR UPDATE ONE BUILD SCRIPT WITHOUT MIRRORING THE CHANGES IN THE OTHERS.  While this approach 
     leads to a lot of "repeated code," the advantage is that each module is able in this way to maintain a simple, 
     understandable build process without external dependencies.
     
     The following should be customized (or, if unneeded, removed) in each build file:
     - The name of the project
     - The test-classes, test-products, and resources patternsets
     - The readable-project-name, jar-filename, src-working-dir, etc. properties
     - The list of generated sources
     - The list of environment variables
     - The list of additional taskdefs
     - The help target description
     - The build target behavior (specifying the default build process)
     - The list of source-generating targets
     - The test target behavior (specifying the default test target)
     - The list of files removed by "clean"
     - The command to export CVS sources in "src-zip"
-->
     
     
<project name="dynamicjava" default="help">

  <!-- Matches class files that are tests, and thus should be separated into
       the "classes/test" directory. The search is relative to "classes/base". -->
  <patternset id="test-classes">
    <include name="**/*Test.class" />
    <include name="**/*Test$*.class" />
    <include name="**/*TestCase.class" />
    <include name="**/*TestCase$*.class" />
  </patternset>

  <!-- Matches files that are generated by tests, but should not be committed to CVS.
       The search is relative to the testFiles directory.  If additional unmatched test 
       products occur, *THEY SHOULD BE ADDED TO THIS SET* in order to insure that "clean" 
       works properly. -->
  <patternset id="test-products">
    <exclude name="**" />
  </patternset>

  <!-- Matches non-class-file resources that should be available to the executable.
       The search is relative to the src directory. -->
  <patternset id="resources">
    <include name="**/LICENSE" />
    <include name="**/README" />
    <include name="**/*.gif" />
    <include name="**/*.png" />
    <include name="**/*.jpg" />
    <include name="**/*.jpeg" />
    <include name="**/*.properties" />
  </patternset>

  <property name="readable-project-name" value="DynamicJava" />
  <property name="jar-filename" value="dynamicjava.jar" />
  <property name="jar-base-filename" value="dynamicjava-base.jar" />
  <property name="jar-14-filename" value="dynamicjava-14.jar" />
  <property name="jar-base-14-filename" value="dynamicjava-base-14.jar" />
  <property name="jar-main-class" value="koala.dynamicjava.interpreter.Main" />
  
  <property name="src-working-dir" value="src/koala/dynamicjava" />

  <!-- Relative paths to generated sources.  Note: changes to this list should be mirrorred
       in the "Source-generating Targets" section and the "clean" target. -->
  <property name="dynamicjava-parser" value="${src-working-dir}/parser/grammar.jj" />
  <property name="dynamicjava-parser-dir" value="${src-working-dir}/parser/impl" />
  <property name="code-status-source" value="${src-working-dir}/CodeStatus.orig" />
  <property name="code-status-target" value="${src-working-dir}/CodeStatus.java" />
  <property name="version-source" value="${src-working-dir}/Version.orig" />
  <property name="version-target" value="${src-working-dir}/Version.java" />
  
  <property environment="env" />
  <property name="javacc-home"  value="${env.JAVACC_HOME}" />
  <property name="java14-home" value="${env.JAVA14_HOME}" />
  
  <!-- By default, don't filter tests on anything -->
  <property name="test-spec" value="" />
  
  <!-- By default, delete jar files when cleaning -->
  <property name="delete-jars" value="yes" />
  
  <!-- By default, don't append anything extra to the tag -->
  <property name="tag-append" value="" />
  
  <!-- By default, generate development (non-stable) build products -->
  <property name="is-development" value="yes" />
  
  <!-- Don't use or inherit the CLASSPATH environment variable for anything -->
  <property name="build.sysclasspath" value="ignore" />
  
  <fileset id="libs" dir="lib" includes="*.jar" /> <!-- Only include jars that are at the top level (not in buildlib) -->
  
  <!-- Retroweaver task, used to convert Java 1.5 class files to be compatible with an earlier JVM;
       also checks class references to insure that there are no dependencies on 1.5 APIs -->
  <taskdef name="retroweaver" classpath="lib/buildlib/retroweaver-ex.jar" 
           classname="com.rc.retroweaver.ant.RetroWeaverTask" />
        
                 
  <!-- ***********
       Help Target
       *********** -->
  
  <target name="help" description="Print general build script information">
    <echo message="--------------------------------------------------------------------" />
    <echo message="DynamicJava Build Scripts" />
    <echo message="--------------------------------------------------------------------" />
    <echo message="Type 'ant -projecthelp' or 'ant -p' to see the list of targets." />
    <echo message="" />
    <echo message="For this build file to function properly, the following environment " />
    <echo message="variables should be defined:" />
    <echo message="JAVACC_HOME: Top-level directory of JavaCC (version 4.0 or later)" />
    <echo message="JAVA14_HOME: Home folder of the JRE version 1.4" />
    <echo message="PATH: 'cvs' needs to refer to the CVS executable" />
    <echo message="" />
    <echo message="Additionally, Ant must be run under Java 5.0 or later.  If that is " />
    <echo message="not the system default, it may be set for Ant by using JAVA_HOME." />
    <echo message="Ant may also require ANT_HOME to be set.  Note that the value of " />
    <echo message="CLASSPATH will be ignored -- classes on the system classpath will " />
    <echo message="not be visible during the build process.  To run JUnit tests," />
    <echo message="a copy of junit.jar should be installed in the Ant lib directory." />
  </target>
  
  
  <!-- ***************************
       Property-resolution Targets 
       *************************** -->
  
  <target name="resolve-java14-runtime">
    <!-- We rely on "location" to generate a platform-specific path; note that properties
         are immutable and so java14-runtime will only be set the *first* time. -->

    <property name="java14-runtime-1" location="${java14-home}/lib/rt.jar" />
    <available property="java14-runtime" value="${java14-runtime-1}" file="${java14-runtime-1}" />

    <property name="java14-runtime-2" location="${java14-home}/jre/lib/rt.jar" />
    <available property="java14-runtime" value="${java14-runtime-2}" file="${java14-runtime-2}" />

    <property name="java14-runtime-3" location="${java14-home}/../Classes/classes.jar" />
    <available property="java14-runtime" value="${java14-runtime-3}" file="${java14-runtime-3}" />

    <fail message="Can't find rt.jar in the Java 1.4 home: ${java14-home}" unless="java14-runtime" />
  </target>
  
  <target name="resolve-java14-exec">
    <!-- We rely on "location" to generate a platform-specific path -->

    <property name="java14-exec-1" location="${java14-home}/bin/java.exe" />
    <condition property="java14-exec" value="${java14-exec-1}">
      <and>
        <available file="${java14-exec-1}" />
        <os family="windows" />
      </and>
    </condition>
    
    <property name="java14-exec-2" location="${java14-home}/bin/java" />
    <available property="java14-exec" value="${java14-exec-2}" file="${java14-exec-2}" />

    <fail message="Can't find the java executable in the Java 1.4 home: ${java14-home}" unless="java14-exec" />
  </target>
  
  <target name="assert-15">
    <fail message="The specified target requires Ant to be run under Java 5.0">
      <condition>
        <not>
          <contains string="${java.version}" substring="1.5." />
        </not>
      </condition>
    </fail>
  </target>
    
  <target name="assert-jar-exists">
    <available property="jar-exists" file="${ant.project.name}.jar" />
    <fail message="Can't find ${ant.project.name}.jar" unless="jar-exists" />
  </target>
  
  <target name="resolve-development-value">
    <condition property="development-value" value="true">
      <istrue value="${is-development}" />
    </condition>
    <!-- else... -->
    <property name="development-value" value="false" />
  </target>
    
  <target name="resolve-version-tag">
    <!-- Get a timestamp based on GMT, rather than local time -->
    <tstamp>
      <format property="DSTAMP" pattern="yyyyMMdd" timezone="GMT" />
      <format property="TSTAMP" pattern="HHmm" timezone="GMT" />
      <format property="TODAY" pattern="MMMM dd yyyy" timezone="GMT" />
    </tstamp>
    <property name="version-tag"
              value="${ant.project.name}-${DSTAMP}-${TSTAMP}" />
  </target>  

  <target name="resolve-cvs-user-name">
    <input message="Please enter your CVS user name: " addproperty="cvs-user-name" />
  </target>


  <!-- ************
       Build Target
       ************ -->
  
  <target name="build" depends="generate-source, compile, test, jar" 
          description="Shortcut for 'generate-source compile test jar'">
  </target>
  

  <!-- *************************
       Source-generating Targets
       ************************* -->
  
  <target name="generate-source" depends="resolve-development-value, resolve-version-tag"
          description="Generate the CodeStatus, Version, and parser source files">
    <filter token="DEVELOPMENT" value="${development-value}" />
    <filter token="DATE" value="${DSTAMP}" />
    <filter token="TIME" value="${TSTAMP}" />
    <echo message="Processing ${code-status-source}" />
    <copy file="${code-status-source}" tofile="${code-status-target}" filtering="yes" />
    <echo message="Processing ${version-source}" />
    <copy file="${version-source}" tofile="${version-target}" filtering="yes" />

    <antcall target="generate-parser" inheritall="false">
      <param name="generate-sourcefile" value="${dynamicjava-parser}" />
      <param name="generate-dir" value="${dynamicjava-parser-dir}" />
    </antcall>
  </target>

  <!-- Assumes that the properties generate-sourcefile and generate-dir have been set, and that 
       already-generated has *not* been set -->  
  <target name="generate-parser" depends="check-generate-dir" unless="already-generated">
    <echo message="Processing ${generate-sourcefile}" />
    <!-- Unfortunately, dependset doesn't delete nested directories, so we have
         to clean up the empty directories here -->
    <delete dir="${generate-dir}" />
    <mkdir dir="${generate-dir}" />
    <javacc target="${generate-sourcefile}" outputdirectory="${generate-dir}" javacchome="${javacc-home}" />
            
    <!-- Fix problems in generated code that cause compiler warnings -->
    <replace file="${generate-dir}/JavaCharStream.java"
             token="public int getColumn()"
             value="@Deprecated public int getColumn()" />
    <replace file="${generate-dir}/JavaCharStream.java"
             token="public int getLine()"
             value="@Deprecated public int getLine()" />
    <!-- We want to replace the next two in the parser file, but we don't have easy access to its name,
         so we just search the whole directory instead -->
    <replace dir="${generate-dir}"
             token="java.util.Vector jj_expentries = new java.util.Vector()"
             value="java.util.Vector&lt;int[]&gt; jj_expentries = new java.util.Vector&lt;int[]&gt;()" />
    <replace dir="${generate-dir}"
             token="java.util.Enumeration e = jj_expentries.elements()"
             value="java.util.Enumeration&lt;int[]&gt; e = jj_expentries.elements()" />
  </target>

  <target name="check-generate-file">
    <dependset>
      <srcfilelist dir="${basedir}" files="${generate-sourcefile}" />
      <targetfilelist dir="${basedir}" files="${generate-file}" />
    </dependset>
    <condition property="already-generated">
      <available file="${generate-file}" />
    </condition>
  </target>

  <target name="check-generate-dir">
    <dependset>
      <srcfilelist dir="${basedir}" files="${generate-sourcefile}" />
      <targetfileset dir="${generate-dir}" />
    </dependset>
    <!-- We use pathconvert as a hack to find out if dependset did anything -->
    <pathconvert property="already-generated" pathsep="," setonempty="false">
      <path>
        <fileset dir="${basedir}" includes="${generate-dir}/**">
          <type type="file" />
        </fileset>
      </path>
    </pathconvert>
  </target>

    
  <!-- *******************
       Compilation Targets
       ******************* -->
  
  <target name="compile" depends="generate-source, do-compile, copy-resources, unjar-libs, retroweave"
          description="Compile all source files and make them 1.4 compatible (after generating the source)">
  </target>
  
  <target name="do-compile" depends="generate-source, assert-15">
    <echo message="Compiling src directory to classes/base and classes/test" />
    <mkdir dir="classes/base" />
    <mkdir dir="classes/test" />
    <!-- Move any test classes back to base to prevent recompilation -->
    <move todir="classes/base">
      <fileset dir="classes/test" />
    </move>
    <javac srcdir="src" destdir="classes/base" source="1.5" target="1.5" sourcepath="" 
           debug="on" optimize="off" deprecation="on" includeAntRuntime="no" fork="yes">
      <classpath>
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/base" />
        <pathelement location="classes/test" />
      </classpath>
      <compilerarg value="-Xlint" />
      <!-- Ignore serial warnings, because they occur for every Throwable definition (among others) -->
      <compilerarg value="-Xlint:-serial" /> 
      <!-- Use the next line to compile against other sources, ignoring any unneeded classes.
           This can be useful in creating a pruned version of a jar file for the lib directory.
           (You must also clear the sourcepath="" option.)
      <include name="${src-working-dir}/**/*.java" /> -->
    </javac>
    <move todir="classes/test">
      <fileset dir="classes/base">
        <patternset refid="test-classes" />
      </fileset>
    </move>
  </target>
  
  <target name="copy-resources">
    <copy todir="classes/base">
      <fileset dir="src">
        <patternset refid="resources" />
      </fileset>
    </copy>
  </target>
  
  <target name="check-unjar-libs">
    <uptodate property="unjarred-libs-uptodate" targetfile="classes/lib">
      <srcfiles refid="libs" />
    </uptodate>
  </target>
  
  <target name="unjar-libs" depends="check-unjar-libs" unless="unjarred-libs-exist">
    <echo message="Unjarring jar files in the lib directory" />
    <!-- Delete "classes/lib" in case it exists (but is out of date) -->
    <delete dir="classes/lib" />
    <mkdir dir="classes/lib" />
    <unjar dest="classes/lib">
      <fileset refid="libs" />
      <patternset excludes="META-INF/**" />
    </unjar>
  </target>
  
  <target name="retroweave" depends="do-compile, unjar-libs, resolve-java14-runtime">
    <!-- Note: This target, in addition to checking 1.4 compatibility, serves to ensure that there are no dependencies
         on test classes or JUnit classes in the base.  If 1.4 compatibility is no longer needed, a similar dependency
         check should still be done. -->
    <echo message="Generating 1.4 versions of the classes directories (this may take awhile after a large compile)" />
    
    <!-- Convert lib classes -->
    <mkdir dir="classes/lib-14" />
    <retroweaver srcdir="classes/lib" destdir="classes/lib-14" version="1.4" failonerror="true" />
    <copy todir="classes/lib-14">
      <fileset dir="classes/lib" excludes="**/*.class" />
    </copy>
    
    <!-- Convert base classes -->
    <mkdir dir="classes/base-14" />
    <pathconvert property="retroweaver-base-classpath" dirsep="${file.separator}" pathsep="${path.separator}">
      <path>
        <pathelement location="${java14-runtime}" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </path>
    </pathconvert>
    <!-- Note: "verifyrefs" is called "refclasspath" in the documentation, but that name is incorrect -->
    <retroweaver srcdir="classes/base" destdir="classes/base-14" version="1.4" failonerror="true" 
                 verifyrefs="${retroweaver-base-classpath}" />
    <copy todir="classes/base-14">
      <fileset dir="classes/base" excludes="**/*.class" />
    </copy>
                 
    <!-- Convert test classes -->
    <mkdir dir="classes/test-14" />
    <pathconvert property="retroweaver-test-classpath" dirsep="${file.separator}" pathsep="${path.separator}">
      <path>
        <pathelement location="${java14-runtime}" />
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/test-14" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </path>
    </pathconvert>
    <!-- Note: "verifyrefs" is called "refclasspath" in the documentation, but that name is incorrect -->
    <retroweaver srcdir="classes/test" destdir="classes/test-14" version="1.4" failonerror="true" 
                 verifyrefs="${retroweaver-test-classpath}" />
    <copy todir="classes/test-14">
      <fileset dir="classes/test" excludes="**/*.class" />
    </copy>
                 
  </target>


  <!-- **************
       Testing Target
       ************** -->
  
  <target name="test" depends="test-15" description="Shortcut for 'test-15'">
  </target>
  
  <target name="test-15" depends="compile, assert-15"
          description="Run all tests under Java 5.0 (after compiling); use -Dtest-spec=... to filter the tests">
    <echo message="Running all tests matching '${test-spec}' under Java 5.0" />
    <!-- TODO: Experiment with performance under different forkmodes -->
    <junit printsummary="on" haltonerror="on" haltonfailure="on" fork="on" 
           maxmemory="256M" dir="${basedir}">
      <classpath>
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/test" />
        <pathelement location="classes/base" />
        <pathelement location="classes/lib" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <fileset dir="classes/test" includes="**/*${test-spec}*Test.class" />
      </batchtest>
    </junit>
  </target>

  <target name="test-14" depends="compile, resolve-java14-exec"
          description="Run all tests under Java 1.4 (after compiling); use -Dtest-spec=... to filter the tests">
    <echo message="Running all tests matching '${test-spec}' under Java 1.4" />
    <!-- TODO: Experiment with performance under different forkmodes -->
    <junit printsummary="on" haltonerror="on" haltonfailure="on" fork="on" 
           maxmemory="256M" jvm="${java14-exec}" dir="${basedir}">
      <classpath>
        <pathelement location="lib/buildlib/junit.jar" />
        <pathelement location="classes/test-14" />
        <pathelement location="classes/base-14" />
        <pathelement location="classes/lib-14" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <fileset dir="classes/test-14" includes="**/*${test-spec}*Test.class" />
      </batchtest>
    </junit>
  </target>


  <!-- ***********
       Jar Targets
       *********** -->
       
  <target name="jar" depends="compile, resolve-version-tag" 
          description="Create the jar file with all classes and libs (compiling first)">
    <jar jarfile="${jar-filename}">
      <manifest>
        <attribute name="Main-Class" value="${jar-main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib" />
      <fileset dir="classes/base" />
    </jar>
  </target>

  <target name="jar-base" depends="compile, resolve-version-tag" 
          description="Create the jar file without any support libs (compiling first)">
    <jar jarfile="${jar-base-filename}">
      <manifest>
        <attribute name="Main-Class" value="${jar-main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base" />
    </jar>
  </target>

  <target name="jar-14" depends="compile, resolve-version-tag" 
          description="Create the 1.4 jar file with all classes and libs (compiling first)">
    <jar jarfile="${jar-14-filename}">
      <manifest>
        <attribute name="Main-Class" value="${jar-main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/lib-14" />
      <fileset dir="classes/base-14" />
    </jar>
  </target>

  <target name="jar-base-14" depends="compile, resolve-version-tag" 
          description="Create the 1.4 jar file without any support libs (compiling first)">
    <jar jarfile="${jar-base-14-filename}">
      <manifest>
        <attribute name="Main-Class" value="${jar-main-class}" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Version" value="${version-tag}" />
      </manifest>
      <fileset dir="classes/base-14" />
    </jar>
  </target>

  <!-- ***************
       Javadoc Targets
       *************** -->
  
  <target name="javadoc" depends="generate-source, assert-15, check-javadoc, resolve-version-tag" unless="javadocs-exist"
          description="Generate javadocs from the source folder (generating source first)">
    <echo message="Generating javadocs" />
    <!-- Unfortunately, dependset doesn't delete nested directories, so we have
         to clean up the empty directories here -->
    <delete dir="docs/javadoc" />
    <mkdir dir="docs/javadoc" />
    <javadoc sourcepath="src" packagenames="*" destdir="docs/javadoc"
             access="protected" Use="yes" Version="yes" Author="yes" Windowtitle="${version tag} API">
      <classpath>
        <pathelement location="${java15-tools}" />
        <fileset refid="libs" />
        <pathelement location="lib/buildlib/junit.jar" />
      </classpath>
      <link href="http://java.sun.com/j2se/1.5/docs/api" />
      <link href="http://junit.org/junit/javadoc/3.8.1" />
    </javadoc>
  </target>

  <target name="check-javadoc">
    <dependset>
      <srcfileset dir="src" />
      <targetfileset dir="docs/javadoc" />
    </dependset>
    <!-- We use pathconvert as a hack to find out if dependset did anything -->
    <pathconvert property="javadocs-exist" pathsep="," setonempty="false">
      <path>
        <fileset dir="${basedir}" includes="docs/javadoc/**">
          <type type="file" />
        </fileset>
      </path>
    </pathconvert>
  </target>

  
  <!-- ************
       Clean Target
       ************ -->
       
  <target name="clean" description="Remove all build products; the result should match the intended CVS contents">
    <echo message="Deleting all build products" />
    <delete dir="classes" />
    <delete dir="docs" />
    <delete dir="${dynamicjava-parser-dir}" />
    
    <delete>
      <fileset dir="testFiles">
        <patternset refid="test-products" />
      </fileset>
    </delete>
    
    <condition property="do-delete-jars">
      <istrue value="${delete-jars}" />
    </condition>
    <delete includeemptydirs="true">
      <fileset dir="${basedir}" defaultexcludes="no">
        <include name="*.jar" if="do-delete-jars" />
        <include name="*.zip" if="do-delete-jars" />
        <include name="*.tar.gz" if="do-delete-jars" />
        <include name="${ant.project.name}-*" />
        <include name="${code-status-target}" />
        <include name="${version-target}" />
        <!-- We could get rid of backups, but "update" ignores them, so they're okay.
             (doesn't work if defaultexcludes is "yes") -->
        <!-- <include name="**/*~" /> -->
        <!-- Get rid of pesky OS helper files (doesn't work if defaultexcludes is "yes") -->
        <include name="**/.DS_Store" />
        <include name="**/Thumbs.db" />
      </fileset>
    </delete>
    
  </target>

  <!-- ***********
       CVS Targets 
       *********** -->
  
  <target name="update" depends="clean" description="Reconcile source with the CVS archive">
    <echo message="Running CVS update ('-q' -- you will only see output for files that don't match)" />
    <!-- TODO: Experiment with the 'compression' option -->
    <cvs command="update -d -P" quiet="true" />
  </target>


  <target name="commit" depends="update, build, do-commit, tag" 
          description="Commit source to the CVS archive (after building)">
    <echo message="New version is committed to CVS" />
  </target>

  <target name="do-commit">
    <antcall target="clean" inheritall="false"> <!-- Clean up after the latest build -->
      <param name="delete-jars" value="no" />
    </antcall>
    <input message="Please enter a log message for the commit: "
           addproperty="cvs.commit.message" />
    <echo message="Running CVS commit"/>
    <cvs quiet="true">
      <commandline> 
         <argument value="commit" />
         <argument value="-m" />
         <argument value="${cvs.commit.message}" />
      </commandline>
    </cvs>
  </target>
  
  <target name="tag" depends="resolve-version-tag">
    <echo message="Running CVS tag with version ${version-tag}"/>
    <cvs command="tag -c ${version-tag}" reallyquiet="true" />
  </target>

  
  <!-- ********************************
       Misc Occasionally-Useful Targets
       ******************************** -->
  
  <patternset id="exclude-binaries">
    <exclude name="**/*.jar" />
    <exclude name="**/*.class" />
    <exclude name="**/DrJava" />
    <exclude name="**/*.png" />
    <exclude name="**/*.icns" />
    <exclude name="**/*.gif" />
    <exclude name="**/*.jpg" />
    <exclude name="**/*.jpeg" />
  </patternset>

  <!-- Run a batch find-and-replace on all text files in the project.
       Assumes the properties "find" and "replace" have been defined
       (e.g. "ant -Dfind=foo -Dreplace=bar find-and-replace"). -->
  <target name="find-and-replace">
    <replace dir="${basedir}" token="${find}" value="${replace}" summary="yes">
      <patternset refid="exclude-binaries" />
    </replace>
  </target>
  
  <!-- Standardize all newline character sequences.  CVS takes care of this 
       automatically, but sometimes files crop up with the wrong sequence.
       Use "cvs update" after running this to see which files were fixed. -->
  <target name="fix-newlines">
    <!-- If we're in Windows, use \r\n -->
    <condition property="newline-code" value="crlf">
      <os family="windows" />
    </condition>
    <!-- Otherwise, use \n -->
    <property name="newline-code" value="lf" />
    <fixcrlf srcdir="${basedir}" eol="${newline-code}" fixlast="no">
      <patternset refid="exclude-binaries" />
    </fixcrlf>
  </target>
  
</project>
