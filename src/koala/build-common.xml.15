<!--
  $Header$

  Common build-file targets for multiple projects.

  Assumes these variables are set:
    built
    srcroot
    projpath
    public_javadoc_dir
	
  These are optional:
    compile-from
	compile-to

  Assumes these targets exist:
    stable
    development
 
-->
<!-- <taskdef name="javamake" classname="com.sun.tools.javamake.ant.JavaMake"/>  -->

<property name="compile-from" value="${srcroot}" />
<property name="compile-to" value="${built}" />

<property name="build.sysclasspath" value="last" />

<property name="lib_dir" value="${srcroot}/edu/rice/cs/lib" />

<property name="jars_dir" value="/home/javaplt/public_html/drjava/builds" />

<!-- put javadoc in this directory if generating private javadoc -->
<property name="private_javadoc_dir" value="${srcroot}/../javadoc/${ant.project.name}" />

<!-- put documentation output in this directory -->
<property name="doc_dir" value="${srcroot}/../docs" />

<!-- put Clover HTML test coverage output in this directory -->
<property name="clover_dir" value="${srcroot}/../clover" />

<!-- put Clover test coverage database files in this directory -->
<property name="clover_db_dir" value="${srcroot}/../cloverdb" />


<!-- classpath to use everywhere. -->
<path id="classpath">

<!--  <pathelement path="${java.class.path}" /> -->
  <fileset dir="${lib_dir}">
    <include name="*.jar" />
    <exclude name="jsr14.jar" />
    <exclude name="collect.jar" />
  </fileset>
  <pathelement path="${built}" />
</path>

<!-- Init target. All others depend on it. Initialize the directory. -->
<target name="init">
  <available type="file" file="${jsr14_classpath}" property="jsr14_ok" />
  <!--antcall target="check_for_jsr14" /-->
  <mkdir dir="${built}" /> <!-- Make the built directory -->

  <pathconvert refid="classpath"
               property="classpath_text"
               pathsep="${path.separator}" />

</target>


<!-- Get a timestamp based on GMT, rather than local time -->
<target name="get-timestamp">
  <tstamp>
	<format property="DSTAMP" pattern="yyyyMMdd" timezone="GMT" />
	<format property="TSTAMP" pattern="HHmm" timezone="GMT" />
	<format property="TODAY" pattern="MMMM dd yyyy" timezone="GMT" />
  </tstamp>
</target>



<!-- Reconcile source with CVS archive -->
<target name="update" depends="init">
  <cvs command="update -d -P" compression="true" />
</target>

<target name="make-version-stamp" depends="get-timestamp">
  <!-- Create new Version.java, filling in date and time. -->
  <filter token="DATE" value="${DSTAMP}" />
  <filter token="TIME" value="${TSTAMP}" />
  <copy file="Version.orig"
        tofile="Version.java" 
        overwrite="yes"
        filtering="yes" />
</target>



<!-- Commit source to CVS archive
     Before doing do, we update our copy with the CVS copy. This ensures that
     if there were any clashes, we have to resolve them now. Then we
     recompile (from scratch) and retest. If this all succeeds, we can commit.

     After committing, we tag the build we just made with the tag
     projectname-date-time.
-->
<target name="do-commit" depends="clean, update, test, make-version-stamp, get-timestamp">
  <property name="version-tag"
            value="${ant.project.name}-${DSTAMP}-${TSTAMP}" />

  <!-- recompile to make new version number get into code. -->
  <echo message="All tests passed. Rebuilding to put version tag (${version-tag}) into the code." />
  <antcall target="compile" />

  <tempfile property="commit-comments-filename" 
            destdir="${java.io.tmpdir}"
            prefix="commit-comments" />
  <antcall target="create-commit-comments">
    <param name="commit-comments-filename" value="${commit-comments-filename}"/>
  </antcall>
  <cvs>
    <commandline>
      <argument value="commit" />
      <argument value="-F" />
      <argument value="${commit-comments-filename}" />
    </commandline>
  </cvs>
  <delete file="${commit-comments-filename}"/>

  <cvs command="tag -c ${version-tag}" quiet="true" compression="true" />

  <echo message="New version ${version-tag} committed to CVS." />
  <echo message="Note: This version has not yet been released. To release it, follow the process described at http://sourceforge.net/docman/display_doc.php?docid=9899&amp;group_id=44253." />

</target>


<!-- This target saves the commit comments to the file specified in the
     "commit-comments-filename" property, which must be passed in.  The
     comments can either be typed manually on one line, or copied from an
     existing file; the user is given a choice of which method to use.

     This target uses "file-commit-comments" and "type-commit-comments" to 
     finish the task.
     
     (See the do-commit target above for how to use this file in a cvs commit.)
-->
<target name="create-commit-comments">
  <input message="Commit Comments: [t]ype manually or [r]ead from a file? "
         validargs="t,r"
         addproperty="commit-comments-method" />
  <condition property="commit-comments-readFile">
    <equals arg1="r" arg2="${commit-comments-method}"/>
  </condition>

  <!-- call both, but only one will run -->
  <antcall target="file-commit-comments">
    <param name="commit-comments-filename" value="${commit-comments-filename}"/>
  </antcall>
  <antcall target="type-commit-comments">
    <param name="commit-comments-filename" value="${commit-comments-filename}"/>
  </antcall>
</target>

<!-- Read in the name of the file containing the commit comments
     and copy its contents to our commit-comments-file.
-->
<target name="file-commit-comments" if="commit-comments-readFile">
  <input message="Name of file with commit comments:"
         addproperty="user-comments-filename"/>
  <copy file="${user-comments-filename}" tofile="${commit-comments-filename}"/>
</target>

<!-- Read in comments for a CVS commit and save to our commit-comments-file,
     but only if an existing file has not already been specified.
-->
<target name="type-commit-comments" unless="commit-comments-readFile">
  <!-- Read in commit comment, then save to a temp file -->
  <input message="Please enter the comments for the commit:"
         addproperty="commit-comments-contents" />
  <echo file="${commit-comments-filename}" 
        message="${commit-comments-contents}" />
</target>
 

<!-- By default, commit uses the development version -->
<target name="commit" depends="development">
  <echo message="Committing the development version"/>
  <antcall target="do-commit" />
</target>

<target name="commit-stable" depends="stable">
  <echo message="Committing the stable version"/>
  <antcall target="do-commit" />
</target>

<!-- commit this version and then release it. -->
<target name="commit-and-release" depends="commit, release">
</target>
    
<!-- Compile. We have to start at srcroot and then selectively include
     just this project in order for it to realize what files have already
     been compiled (preventing needless recompilation).

     This version works with JDK 1.5.0
--> 
<target name="do-compile" depends="init">
  <mkdir dir="${compile-to}"/>
  <javac sourcepath="" srcdir="${compile-from}"
         includes="${projpath}/**/*java"
         destdir="${compile-to}"
         classpath="${classpath_text}"
         source="1.5"
         target="jsr14"
         debug="on"
         fork="on"
         optimize="off">
    <compilerarg value="-warnunchecked"/>
  </javac>
</target>

<!-- Checked Compile. Identical to Compile with Generic Warning Checking
     enabled.

     This version works with JDK 1.5.0
-->
<target name="checked-compile" depends="init">
  <mkdir dir="${compile-to}"/>
  <javac sourcepath="" srcdir="${compile-from}"
         includes="${projpath}/**/*java"
         destdir="${compile-to}"
         classpath="${classpath_text}"
         source="1.5"
         debug="on"
         fork="on"
         optimize="off">
    <compilerarg value="-warnunchecked"/>
  </javac>
</target>


<!-- Now you can run a subset of tests by doing:
     ant -Dtest-spec=XXX run-tests

     Where XXX is the substring that must be in the test's file name
     in order to run it
-->
<property name="test-spec" value="" />
<target name="test-only">
  <junit printsummary="yes" haltonerror="yes" haltonfailure="yes" fork="yes">
    <classpath refid="classpath" />

    <!-- This makes JUnit display info about each test to console -->
    <formatter type="plain" usefile="no" />

    <!-- This makes JUnit run all test classes. It figures out which ones
         automatically, without needing AllTests classes.
    -->
    <batchtest>
      <!-- The root of the fileset must be where edu/ is. -->
      <fileset dir="${srcroot}">
        <!-- Include only from projpath to only get classes in this project!
        -->
        <include name="${projpath}/**/*${test-spec}*Test.java" />
        <exclude name="**/AllTests.java" />
        <exclude name="**/Test.java" />
      </fileset>
    </batchtest>
  </junit>
</target>

<!-- Unit test, forcing recompile first -->
<target name="test" depends="compile, test-only">
</target>

<!-- generate private javadoc for current uncommitted version -->
<target name="javadoc" depends="init, get-timestamp">
  <antcall target="generate_javadoc">
    <param name="javadoc_dir" value="${private_javadoc_dir}" />
    <param name="javadoc_title" value="${user.name}-uncommitted-${ant.project.name}-${DSTAMP}-${TSTAMP}" />
  </antcall>
</target>


<!-- Generate javadoc, removing generics references first.
     The property javadoc_dir must be set when calling this.
     The property javadoc_title must be set when calling this.
-->
<target name="generate_javadoc" if="javadoc_dir" depends="init">
  <delete dir="${javadoc_dir}" />
  <mkdir dir="${javadoc_dir}" />

  <javadoc sourcepath="${srcroot}"
           destdir="${javadoc_dir}"
           Private="yes"
           Use="yes"
           Version="yes"
           Windowtitle="${javadoc_title}"
           linksource="yes"
           packagenames="edu.rice.cs.*,koala,koala.*"
           maxmemory="128m"
           author="yes"
           source="1.5">

    <classpath refid="classpath" />

    <arg value="-keywords" />

    <header>
    <![CDATA[<B>DrJava API Documentation</B>]]>
    </header>

    <footer>
    <![CDATA[<B>DrJava API Documentation</B>]]>
    </footer>

    <group title="DrJava" packages="edu.rice.cs.drjava:edu.rice.cs.drjava.*"/>
    <group title="Util" packages="edu.rice.cs.util:edu.rice.cs.util.*"/>
    <group title="DynamicJava" packages="koala:koala.*"/>

    <link href="http://www.junit.org/junit/javadoc/3.8.1" />
    <link href="http://java.sun.com/j2se/1.5/docs/api" />
  </javadoc>
</target>

<!-- Delete all generated files (only for this project!) -->
<target name="clean">
  <delete dir="${private_javadoc_dir}" />
  <delete dir="${built}/${projpath}" />
  <delete file="${jarfile}" />
  <delete file="${osxdir}/${osxtag}.tar.gz" />
  <delete dir="${doc_dir}" />
</target>

<!-- Clover targets -->
<taskdef resource="clovertasks"/>

<target name="clover"
        depends="clean-clover, with.clover, clean, test, clover-report" />

<target name="clean-clover">
  <delete dir="${clover_dir}/${ant.project.name}" />
  <delete dir="${clover_db_dir}" />
</target>

<target name="with.clover">
  <mkdir dir="${clover_db_dir}" />
  <clover-setup initString="${clover_db_dir}/test_coverage.db">
    <files>
      <exclude name="**/*TestCase*.java" />
      <exclude name="**/*Test.java" />
      <exclude name="**/*TestCase.java" />
      <exclude name="**/*Test$*.java" />
    </files>
  </clover-setup>
</target>

<target name="clover-report" depends="with.clover">
  <clover-report>
    <current outfile="${clover_dir}/${ant.project.name}" 
             title="DrJava">
      <format type="html"/>
    </current>
  </clover-report>
</target>
